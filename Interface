package main

import (
    "fmt"
    "golang.org/x/crypto/ssh"
)

func main() {
    // Define device connection information
    devices := map[string]map[string]string{
        "dut1": {
            "ip":       "10.133.35.158",
            "username": "admin",
            "password": "tcs123",
        },
        "dut2": {
            "ip":       "10.133.35.143",
            "username": "admin",
            "password": "tcs123",
        },
        "dut3": {
            "ip":       "10.133.35.139",
            "username": "admin",
            "password": "tcs123",
        },
    }

    // Connect routers and configure interfaces
    for alias, info := range devices {
        fmt.Printf("Connecting to %s...\n", alias)
        conn, err := ssh.Dial("tcp", info["ip"]+":22", &ssh.ClientConfig{
            User: info["username"],
            Auth: []ssh.AuthMethod{
                ssh.Password(info["password"]),
            },
            HostKeyCallback: ssh.InsecureIgnoreHostKey(), // WARNING: Insecure, use for testing purposes only
        })
        if err != nil {
            fmt.Printf("Failed to connect to %s: %v\n", alias, err)
            continue
        }
        defer conn.Close()

        session, err := conn.NewSession()
        if err != nil {
            fmt.Printf("Failed to create session for %s: %v\n", alias, err)
            continue
        }
        defer session.Close()

        // Configure device interface with IP address
        intf, ipAddr := getInterfaceAndIPAddress(alias)
        err = session.Run(fmt.Sprintf("configure terminal\ninterface %s\nip address %s 255.255.255.0\nno shutdown\nend\n", intf, ipAddr))
        if err != nil {
            fmt.Printf("Failed to configure interface on %s: %v\n", alias, err)
            continue
        }

        // Additional configurations and tests can be added here

        fmt.Printf("Successfully configured interface on %s\n", alias)
    }
}

// Function to get interface and IP address based on device alias
func getInterfaceAndIPAddress(alias string) (string, string) {
    switch alias {
    case "dut1":
        return "Ethernet1/1", "192.168.30.2"
    case "dut2":
        return "Ethernet1/1", "192.168.30.1"
    case "dut3":
        return "Ethernet1/1", "192.168.50.2"
    default:
        return "", ""
    }
}
