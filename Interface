func TestDeviceConnections(t *testing.T) {
    // Define devices
    devices := map[string]Device{
        "dut1": {
            Alias:    "dut1",
            IP:       "10.133.35.158",
            Port:     22,
            Username: "admin",
            Password: "tcs123",
        },
        "dut2": {
            Alias:    "dut2",
            IP:       "10.133.35.143",
            Port:     22,
            Username: "admin",
            Password: "tcs123",
        },
        "dut3": {
            Alias:    "dut3",
            IP:       "10.133.35.139",
            Port:     22,
            Username: "admin",
            Password: "tcs123",
        },
    }

    // Define interfaces and their IP addresses from the datafile
    interfaces := map[string]string{
        "ethernet1/1": "192.168.30.2",
        "ethernet1/7": "192.168.50.2",
    }

    // Define connections from the topology
    connections := map[string]Connection{
        "uut1_uut3_1": {
            FromDevice:  "dut1",
            ToDevice:    "dut3",
            Interface:   "ethernet1/1",
        },
        "uut2_uut3_1": {
            FromDevice:  "dut2",
            ToDevice:    "dut3",
            Interface:   "ethernet1/7",
        },
        "uut3_uut1_1": {
            FromDevice:  "dut3",
            ToDevice:    "dut1",
            Interface:   "ethernet1/1",
        },
        "uut3_uut2_1": {
            FromDevice:  "dut3",
            ToDevice:    "dut2",
            Interface:   "ethernet1/7",
        },
    }

    // Connect to devices and perform operations
    for _, conn := range connections {
        fromDevice := devices[conn.FromDevice]
        toDevice := devices[conn.ToDevice]
        fromInterface := interfaces[conn.Interface]

        t.Logf("Testing connection from %s to %s using interface %s", fromDevice.Alias, toDevice.Alias, fromInterface)

        e, err := connectToDevice(fromDevice)
        if err != nil {
            t.Errorf("Failed to connect to device %s: %v", fromDevice.Alias, err)
            continue
        }
        defer e.Close()

        // Iterate over each interface and ping the corresponding IP address
        for interface, ip := range interfaces {
            t.Logf("Pinging from %s to %s using interface %s - IP: %s", fromDevice.Alias, toDevice.Alias, interface, ip)

            e.Expect(regexp.MustCompile("#"), 10*time.Second) // Wait for the command prompt
            e.Send(fmt.Sprintf("ping %s\n", ip)) // Send the ping command with the interface IP address
            output, _, _ := e.Expect(regexp.MustCompile("#"), 10*time.Second) // Wait for the command prompt after ping
            t.Logf("Ping Output:\n%s", output)
        }
    }
}
